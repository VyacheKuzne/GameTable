import { Server } from 'socket.io';
import { v4 as uuidv4 } from 'uuid';
import { verifyToken } from '../auth/utils/jwt.utils';
import {
  OnGatewayInit,
  SubscribeMessage,
  WebSocketGateway,
  WebSocketServer,
} from '@nestjs/websockets';
import { PrismaClient } from '@prisma/client';
export interface MobsOnTable {
  id: number;
  x: number;
  y: number;
  name: string;
  healthMax: number;
  healthNow: number;
  psih: number;
  idSession?: string | null;
  createdAt: string; // ISO 8601 —Ñ–æ—Ä–º–∞—Ç (Date.toISOString())
  idMob?: number | null;
  idOwner: number;
  tokenMob: string;
  isOverMove?: boolean | null;
}
@WebSocketGateway({
  cors: {
    origin: `*`,
  },
})
export class setMobWS implements OnGatewayInit {
  private userSockets: Map<number, string> = new Map();
  private getSocketIdByUserId(userId: number): string | undefined {
    console.debug('getSocketIdByUserId ' + this.userSockets.get(userId));
    return this.userSockets.get(userId);
  }
  private async determineNextTurn(idSession: string) {
    console.debug('determineNextTurn');
    console.debug(idSession);

    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession },
      include: { Mob: true },
      orderBy: { createdAt: 'asc' },
    });

    const notMovedYet = turnhistoryMobs.filter(
      (entry) => !entry.isOverMove && entry.Mob && entry.status === 'alive',
    );

    notMovedYet.sort((a, b) => {
      const manevrA = a.Mob?.manevr || 0;
      const manevrB = b.Mob?.manevr || 0;
      if (manevrB !== manevrA) return manevrB - manevrA;
      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
    });

    const nextToMove = notMovedYet[0];
    if (!nextToMove) return;

    const socketId = this.getSocketIdByUserId(nextToMove.idOwner);
    const MobIsNowTurn = await this.prisma.mobsOnTable.findFirstOrThrow({
      where: { tokenMob: nextToMove.tokenMob },
    });
    console.debug(MobIsNowTurn);
    if (socketId) {
      this.server.to(socketId).emit('yourTurn', {
        message: '–¢–µ–ø–µ—Ä—å –≤–∞—à —Ö–æ–¥!',
        tokenMob: nextToMove.tokenMob,
        MobIsNowTurn: MobIsNowTurn,
      });
    }
  }
  @WebSocketServer()
  server: Server;
  private prisma = new PrismaClient();

  async afterInit() {
    const messages = await this.prisma.chatMessage.findMany();
    this.server.emit('messgaeFromUser', messages);
  }
  @SubscribeMessage('joinRoom')
  async handleJoinRoom(
    client: any,
    payload: {
      idSession: string;
      userToken: string;
    },
  ) {
    const { idSession, userToken } = payload;
    let userId: number;
    try {
      const decoded = verifyToken(userToken);
      userId = decoded.id;
      console.debug('User ID from token:', userId);
    } catch (e) {
      console.error('Token verification failed:', e.message);
      client.emit('error', 'Invalid token');
      return;
    }
    client.join(idSession);
    console.log(`üîó –ö–ª–∏–µ–Ω—Ç ${client.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${idSession}`);
    await this.prisma.user.update({
      where: { id: userId },
      data: { idSession: idSession },
    });
    const AllMembers = await this.prisma.user.findMany({
      where: { idSession: idSession },
    });
    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: idSession },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });
    this.userSockets.set(userId, client.id);
    this.server.to(idSession).emit('sessionMob', sessionMob);
    this.server.to(idSession).emit('sessionMembers', AllMembers);
    // await this.determineNextTurn(idSession);
  }
  @SubscribeMessage('newMobOnTable')
  async handleMessage(
    client: any,
    payload: {
      idMob: number;
      x: number;
      y: number;
      idSession: string;
      token: string;
      userToken: string;
    },
  ) {
    // üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
    let userId: number;
    try {
      const decoded = verifyToken(payload.userToken);
      userId = decoded.id; // –∏–ª–∏ decoded.sub, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–∞
      console.debug('User ID from token:', userId);
    } catch (e) {
      console.error('Token verification failed:', e.message);
      client.emit('error', 'Invalid token');
      return;
    }
    // console.debug('newMobOnTable');
    const newMobToken = uuidv4();
    // console.debug(token)
    const mobTamplate = await this.prisma.mob.findFirstOrThrow({
      where: { id: payload.idMob },
    });
    await this.prisma.mobsOnTable.create({
      data: {
        idMob: payload.idMob,
        name: mobTamplate.name,
        healthMax: mobTamplate.health,
        healthNow: mobTamplate.health,
        x: payload.x,
        y: payload.y,
        idSession: payload.idSession,
        tokenMob: newMobToken,
        isOverMove: false,
        idOwner: userId,
      },
    });

    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
      include: { Mob: true },
      orderBy: { createdAt: 'asc' },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });

    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    // console.debug(sessionMob);
    // await this.determineNextTurn(payload.idSession);
  }
  @SubscribeMessage('replaceMobOnTable')
  async handleReplaceMob(
    client: any,
    payload: {
      idMob: number;
      x: number;
      y: number;
      idSession: string;
      tokenMob: string;
    },
  ) {
    const findReolacedMobs = await this.prisma.mobsOnTable.findFirst({
      where: { tokenMob: payload.tokenMob },
    });
    // console.log(
    //   '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–± –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è ' +
    //     findReolacedMobs?.id +
    //     ' ' +
    //     findReolacedMobs?.tokenMob,
    // );
    const upadateMobs = await this.prisma.mobsOnTable.update({
      where: {
        tokenMob: findReolacedMobs?.tokenMob,
      },
      data: {
        x: payload.x,
        y: payload.y,
        idSession: payload.idSession,
      },
    });
    // console.log(upadateMobs);
    const sessionMob = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
    });
    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    // await this.determineNextTurn(payload.idSession);
  }
  @SubscribeMessage('GameOn')
  async gameOn(client: any, payload: { idSession: string }) {
    console.debug('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');
    console.debug(payload.idSession);
    await this.determineNextTurn(payload.idSession);
  }
  @SubscribeMessage('editMob')
  async handleEditMob(
    client: any,
    payload: { idSession: string; ownerId: number; tokenMob: string },
  ) {
    console.debug('ownerId –º–æ–±–∞', payload.ownerId);
    console.debug('idSession –º–æ–±–∞', payload.idSession);
    console.debug('tokenMob –º–æ–±–∞', payload.tokenMob);
    const editMob = await this.prisma.mobsOnTable.update({
      where: { tokenMob: payload.tokenMob },
      data: { idOwner: payload.ownerId },
    });
    console.debug(editMob);
    const AllMembers = await this.prisma.user.findMany({
      where: { idSession: payload.idSession },
    });
    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });
    // this.userSockets.set(userId, client.id);
    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    this.server.to(payload.idSession).emit('sessionMembers', AllMembers);
  }
  @SubscribeMessage('endTurn')
  async endTurn(
    client: any,
    payload: { MobIsNowTurn: MobsOnTable; idSession: string },
  ) {
    const endTurnMob = this.prisma.mobsOnTable.update({
      where: { tokenMob: payload.MobIsNowTurn.tokenMob },
      data: { isOverMove: true },
    });
    console.debug('–º–æ–± –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥' + (await endTurnMob).isOverMove);
    const AllMembers = await this.prisma.user.findMany({
      where: { idSession: payload.idSession },
    });
    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });
    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    this.server.to(payload.idSession).emit('sessionMembers', AllMembers);
  }
  @SubscribeMessage('atackMob')
  async atackMob(
    client: any,
    payload: {
      MobIsNowTurn: MobsOnTable;
      idSession: string;
      tokenMob: string;
      renderedMob: any;
    },
  ) {
    console.debug('–ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏');
    // console.debug(payload)
    const atackMob = payload.MobIsNowTurn;
    const atackMobFromTaplate = await this.prisma.mob.findFirstOrThrow({
      where: { id: atackMob.idMob! },
      include: {
        weapon: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ä—É–∂–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        armor: true, // –í–∫–ª—é—á–∞–µ–º –±—Ä–æ–Ω—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      },
    });
    const underArackMob = await this.prisma.mobsOnTable.findFirstOrThrow({
      where: { tokenMob: payload.renderedMob.tokenMob },
    });
    function testWillToLive(willToLiveMob: number | null | undefined): boolean {
      if (willToLiveMob === null || willToLiveMob === undefined) {
        console.warn('–º–æ–± —É–º–µ—Ä.');
        return false;
      }

      const maxAcceptableValue = Math.floor((willToLiveMob / 100) * 20);
      const randomNumber = Math.floor(Math.random() * 20) + 1;

      console.log(
        `willToLiveMob: ${willToLiveMob}, randomNumber: ${randomNumber}, maxAcceptableValue: ${maxAcceptableValue}`,
      );

      return randomNumber <= maxAcceptableValue;
    }
    console.debug(atackMob);
    console.debug(underArackMob);
    const currentHp =
      underArackMob.healthNow - atackMobFromTaplate.weapon?.damage!;
      console.debug('—Ç–µ–∫—É—â–∏–µ —Ö–ø' + currentHp + underArackMob.healthNow + atackMobFromTaplate.weapon?.damage)
    if (currentHp <= 0) {
      const willToLiveMob = underArackMob.willToLive;
      if (
        willToLiveMob !== null &&
        willToLiveMob !== undefined &&
        willToLiveMob >= 100
      ) {
        const currentWillToLive = willToLiveMob - 10;
        await this.prisma.mobsOnTable.update({
          where: {
            id: underArackMob.id,
          },
          data: {
            willToLive: currentWillToLive,
          },
        });
      } else {
        const willToLiveMob = underArackMob.willToLive;

        if (willToLiveMob === null || willToLiveMob === undefined) {
          console.warn(
            'willToLiveMob is null or undefined. Using default max value.',
          );
          const randomNumber = Math.floor(Math.random() * 20) + 1;
        } else {
          const willToLiveMob = underArackMob.willToLive;
          const testResult = testWillToLive(willToLiveMob);

          if (testResult) {
            console.log('–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ!');
            const willToLiveMob = underArackMob.willToLive;
            const currentWillToLive = willToLiveMob! - 10;
            await this.prisma.mobsOnTable.update({
              where: {
                id: underArackMob.id,
              },
              data:{
                willToLive: currentWillToLive
              }
            })
          } else {
            await this.prisma.mobsOnTable.update({
              where: {
                id: underArackMob.id,
              },
              data: {
                status: 'dead',
              },
            });
            console.log('–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!');
          }
        }
      }
    }
    await this.prisma.mobsOnTable.update({
      where: { id: underArackMob.id },
      data: {
        healthNow: currentHp,
      },
    });
    const endTurnMob = this.prisma.mobsOnTable.update({
      where: { tokenMob: payload.MobIsNowTurn.tokenMob },
      data: { isOverMove: true },
    });
    console.debug('–º–æ–± –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥' + (await endTurnMob).isOverMove);
    const AllMembers = await this.prisma.user.findMany({
      where: { idSession: payload.idSession },
    });
    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });
    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    this.server.to(payload.idSession).emit('sessionMembers', AllMembers);
  }
  @SubscribeMessage('roundEnd')
  async roundEnd(
    client: any,
    payload: {
      idSession: string;
    },
  ) {
    const mobsToUpdate = await this.prisma.mobsOnTable.findMany({
      where: {
        idSession: payload.idSession,
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–æ–±, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è isOverMove –≤ false
    await Promise.all(
      mobsToUpdate.map((mob) =>
        this.prisma.mobsOnTable.update({
          where: { id: mob.id },
          data: { isOverMove: false },
        }),
      ),
    );
    const AllMembers = await this.prisma.user.findMany({
      where: { idSession: payload.idSession },
    });
    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });
    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    this.server.to(payload.idSession).emit('sessionMembers', AllMembers);
  }
  @SubscribeMessage('GameStop')
async stopGame(
  client: any,
  payload: { idSession: string; },
) {
  try {
    console.log('–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É!');

    // –û–±–Ω—É–ª—è–µ–º idSession —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å–µ idSession —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç payload.idSession
    await this.prisma.user.updateMany({
      where: { idSession: payload.idSession },
      data: {
        idSession: null
      }
    });

    // –û–±–Ω—É–ª—è–µ–º createdSessionId —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∏–≥—Ä—É
    await this.prisma.user.update({
      where: { createdSessionId: payload.idSession },
      data: {
        createdSessionId: null
      }
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ token (idSession)
    const game = await this.prisma.gameHub.findFirstOrThrow({
      where: { token: payload.idSession }
    });
    console.debug('game object:', game);

    const createdAt = new Date(game.createdAt);  
    const updatedAt = new Date(game.updateAT); 

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (isNaN(createdAt.getTime()) || isNaN(updatedAt.getTime())) {
      console.error('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏', createdAt, updatedAt);
      return;
    }

    // –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const timeDifferenceInMillis = updatedAt.getTime() - createdAt.getTime();
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å—ã (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã -> —á–∞—Å—ã)
    const timeDifferenceInHours = timeDifferenceInMillis / (1000 * 60 * 60); // 1000 ms * 60 sec * 60 min = 1 hour

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    const roundedTimeDifferenceInHours = Math.round(timeDifferenceInHours * 10) / 10;

    console.debug('–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —á–∞—Å–∞—Ö, —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º):', roundedTimeDifferenceInHours);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    const user = await this.prisma.user.findUnique({
      where: { createdSessionId: payload.idSession },
      include: {
        leftTime: true
      }
    });

    if (!user || !user.leftTime) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ leftTime –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    let remainingTimeInSeconds = user.leftTime.time * 3600; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã

    // –í—ã—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    const timeToSubtractInSeconds = roundedTimeDifferenceInHours * 3600;

    // –ù–æ–≤–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    let newRemainingTimeInSeconds = remainingTimeInSeconds - timeToSubtractInSeconds;

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ 0
    if (newRemainingTimeInSeconds < 0) {
      console.warn('–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ 0');
      newRemainingTimeInSeconds = 0;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    const updatedLeftTime = await this.prisma.leftTime.update({
      where: { id: user.leftTime.id },
      data: {
        time: newRemainingTimeInSeconds / 3600, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã
      }
    });

    console.debug('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:', updatedLeftTime);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –≤ gameHub
    await this.prisma.gameHub.update({
      where: { token: payload.idSession },
      data: {
        status: 'end',
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
    this.server.to(payload.idSession).emit('stopGameMessage');

    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
  }
}

  @SubscribeMessage('GameStop')
  async sdf(
    client: any,
    payload: {
      idSession: string;
    },
  ) {
    console.log('–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É!')
    await this.prisma.user.updateMany({
      where: { idSession: payload.idSession },
      data: {
        idSession: null
      }
    });
    await this.prisma.user.update({
      where: {createdSessionId: payload.idSession},
      data:{createdSessionId: null}
    })
    await this.prisma.gameHub.update({
      where: {token: payload.idSession},
      data: {
        status: 'end'
      }
    })
    this.server.to(payload.idSession).emit('stopGameMessage');
  }
    @SubscribeMessage('DeleteMob')
  async deleteMob(
    client: any,
    payload: { idSession: string;tokenMob: string },
  ) {
    // console.debug('ownerId –º–æ–±–∞', payload.ownerId);
    console.debug('idSession –º–æ–±–∞', payload.idSession);
    console.debug('tokenMob –º–æ–±–∞', payload.tokenMob);
    const editMob = await this.prisma.mobsOnTable.update({
      where: { tokenMob: payload.tokenMob },
      data: { status: 'dead' },
    });
    console.debug(editMob);
    const AllMembers = await this.prisma.user.findMany({
      where: { idSession: payload.idSession },
    });
    const turnhistoryMobs = await this.prisma.mobsOnTable.findMany({
      where: { idSession: payload.idSession },
    });
    const allMobs = await this.prisma.mob.findMany();
    const sessionMob = turnhistoryMobs.map((turnHistoryEntry) => {
      const mob = allMobs.find((m) => m.id === turnHistoryEntry.idMob);
      return {
        ...turnHistoryEntry,
        mob: mob || null,
      };
    });
    // this.userSockets.set(userId, client.id);
    this.server.to(payload.idSession).emit('sessionMob', sessionMob);
    this.server.to(payload.idSession).emit('sessionMembers', AllMembers);
  }
}

// where[]{
//   data: {
//     idMob: payload.idMob,
//     x: payload.x,
//     y: payload.y,
//     idSession: payload.idSession,
//   },
// }
